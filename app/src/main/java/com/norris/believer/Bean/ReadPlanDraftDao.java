package com.norris.believer.Bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "READ_PLAN_DRAFT".
*/
public class ReadPlanDraftDao extends AbstractDao<ReadPlanDraft, Long> {

    public static final String TABLENAME = "READ_PLAN_DRAFT";

    /**
     * Properties of entity ReadPlanDraft.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookReview1 = new Property(1, String.class, "bookReview1", false, "BOOKREVIEW1");
        public final static Property BookReview2 = new Property(2, String.class, "bookReview2", false, "BOOKREVIEW2");
        public final static Property BookReview3 = new Property(3, String.class, "bookReview3", false, "BOOKREVIEW3");
        public final static Property BookReview4 = new Property(4, String.class, "bookReview4", false, "BOOKREVIEW4");
        public final static Property BookName = new Property(5, String.class, "bookName", false, "BOOKNAME");
        public final static Property BookId = new Property(6, String.class, "bookId", false, "BOOKID");
    }


    public ReadPlanDraftDao(DaoConfig config) {
        super(config);
    }
    
    public ReadPlanDraftDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READ_PLAN_DRAFT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOKREVIEW1\" TEXT," + // 1: bookReview1
                "\"BOOKREVIEW2\" TEXT," + // 2: bookReview2
                "\"BOOKREVIEW3\" TEXT," + // 3: bookReview3
                "\"BOOKREVIEW4\" TEXT," + // 4: bookReview4
                "\"BOOKNAME\" TEXT," + // 5: bookName
                "\"BOOKID\" TEXT);"); // 6: bookId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READ_PLAN_DRAFT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReadPlanDraft entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookReview1 = entity.getBookReview1();
        if (bookReview1 != null) {
            stmt.bindString(2, bookReview1);
        }
 
        String bookReview2 = entity.getBookReview2();
        if (bookReview2 != null) {
            stmt.bindString(3, bookReview2);
        }
 
        String bookReview3 = entity.getBookReview3();
        if (bookReview3 != null) {
            stmt.bindString(4, bookReview3);
        }
 
        String bookReview4 = entity.getBookReview4();
        if (bookReview4 != null) {
            stmt.bindString(5, bookReview4);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(6, bookName);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(7, bookId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReadPlanDraft entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookReview1 = entity.getBookReview1();
        if (bookReview1 != null) {
            stmt.bindString(2, bookReview1);
        }
 
        String bookReview2 = entity.getBookReview2();
        if (bookReview2 != null) {
            stmt.bindString(3, bookReview2);
        }
 
        String bookReview3 = entity.getBookReview3();
        if (bookReview3 != null) {
            stmt.bindString(4, bookReview3);
        }
 
        String bookReview4 = entity.getBookReview4();
        if (bookReview4 != null) {
            stmt.bindString(5, bookReview4);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(6, bookName);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(7, bookId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReadPlanDraft readEntity(Cursor cursor, int offset) {
        ReadPlanDraft entity = new ReadPlanDraft( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookReview1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookReview2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookReview3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookReview4
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // bookId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReadPlanDraft entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookReview1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookReview2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookReview3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookReview4(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBookId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReadPlanDraft entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReadPlanDraft entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReadPlanDraft entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
